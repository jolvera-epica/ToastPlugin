package com.ejemplo.toast;

import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CallbackContext;
import org.json.JSONArray;
import org.json.JSONException;
import android.widget.Toast;
import com.ejemplo.toast.*;
import android.util.Log;

import okhttp3.Call;
import okhttp3.Callback;
import org.json.JSONObject;
import java.io.IOException;

import android.content.Context;


import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;

public class ToastPlugin extends CordovaPlugin {

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    @Override
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
        if (action.equals("show")) {
            String message = args.getString(0);
            this.showToast(message);
            callbackContext.success();
            return true;
        }
        return false;
    }

    private void showToast(String message) {
        Toast.makeText(cordova.getActivity().getApplicationContext(), message, Toast.LENGTH_SHORT).show();

        // Initialize FaceTec SDK
        Config.initializeFaceTecSDKFromAutogeneratedConfig(cordova.getActivity().getApplicationContext(), successful -> {
            if(successful) {
                showToastLooper("Exito al iniciar");

                getSessionToken(sessionToken -> {
                        showToastLooper("Token:"+sessionToken);
                        LivenessCheckProcessor LivenessCheckProcessor = new LivenessCheckProcessor(sessionToken, this.cordova.getActivity());
                    }
        );
            }
            else {
                showToastLooper("Fallo en el SDK");
            }
        });
    }

    private void showToastLooper(final String message) {
        // Run on UI thread
        this.cordova.getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Toast.makeText(cordova.getActivity().getApplicationContext(), message, Toast.LENGTH_SHORT).show();
            }
        });
    }


    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .header("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                }
            }
        });
    }
}
